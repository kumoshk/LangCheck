#!/usr/bin/env python3

#The purpose of this file is to take a script and show a list of results in order for someone to review to search the script manually after for any resulting concerning words generated by the script.

import re, requests, sys, os;

#Press ctrl+Fn+End to get past all the bad words.
words=r"""

















































god
gawd
jesus
christ
lord
jee
gee
golly
gosh
heaven
goodness
\bgood grief\b
sake
\boh?,? my\b!?
\bmy word\b
holy
holy \w+!?
cow
devil
deuce
damn
damm
dang
darn
drat
hell
heck
screw
whore
bloody
bastard
blast
counfounded
shit
crap
fuck
stupid
dumb
idiot
lame
butt
ass
curse
bitch
stink
clumsy
clumsiness
lousy
ugly
dumm
kopf
mongrel
flea
bitten
clown
bite
kiss
bug
gay
homo
fag
blazes
blazing
evil
piss
puss
cum
cunt
beer
wine
alcohol
vodka
gin
champagne
cocktail
strip
drinking
drunk
sloshed
queer
cheat
adultery
murder
kill
sex
intercourse
\bbed\w*
naked
smoke
cigar
cigarette
drug
inject
marijuana
cannabis
opioid
jeepers
caffeine
patch
nicotine
hate
brilliant
blinking
blooming
flaming
spirits
magic
witch
hag
divination
astrolog
OMG
erotic
bourbon
brandy
fool
geek
nerd
dork
egghead
doof
goof
up yours
coffee
\btea\b
\bteas\b
\bice tea\b
\biced tea\b
sword
\baxe?[s]\b
gun
rifle
spear
pistol
mace
gamble
casino
slot machines?
\bbet\b
\bbetted\b
\bbetting\b
\bbets\b
weed
\bwar\w*
military
zombie
vampire
penis
vagina
gonads
\bnads\b
\bballs\b
clitoris
testicle
scrotum
boob
breasts
\bovary\w*
\bovaries\w*
uterus
PMS
menstr
\bperiod\b
\bdie\b
\bdies\b
\bdied\b
death
plague
disease
scary
fright
Mary
\bMary Jane\b
horror
horrif
dread
\blosers?\b
\bwimps?\b
frick
\bfetch\b
\bfetching\b
\bhugs?\b
\bhuggers?\b
embrace
suck
punk
\bshut up\b
blinkin
fall off
shoot
pete
for the love
son of a
crud
dios
spell
cast as spell
hex
dick
blimey
tarnation
tarnal
my lan
gawd
lawd
genius
negro
darky
spic
spik
black
white
red
cracker
torture
""".strip().lower()









goodwords=r"""
love
charity
faith
kind
happy
bless
nice
play
polite
believe
power
precious
priceless
effective
efficient
amiable
cordial
sentimental
church
admir
philanthrop
hope
glory
sweet
happiness
happier
happiest
modest
virtue
virtuous
patience
temperance
courage
brave
sincere
sincerity
empathy
empathetic
compassion
sympathy
sympathetic
humility
humble
mercy
merciful
mature
meaningful
miracle
mirth
namaste
noble
moderation
generous
generosity
forgive
forgiveness
honor
wisdom
justice
wise
loyal
loyalty
persevere
perseverance
assert
human
trust
self-control
selfless
attentive
joy
integrity
gentle
lady
diligence
diligent
care
caring
clean
commit
confidence
consideration
considerate
assurance
beaut
pretty
gorgeous
fortitude
family
angel
awesome
bliss
benefi
brilliance
calm
peace
tranquil
cheer
champion
celebrat
cute
creative
cool
radical
divine
dazzling
delight
earnest
ecstatic
elegant
enchanting
appealing
exquisite
fabulous
fantastic
favorable
friend
fun
fortunate
grace
genius
smile
hug
handsome
heal
harmony
harmonious
true
truth
honest
intelligent
nurtur
nutritio
perfect
poise
prepar
principl
resilient
producti
safe
secure
skill
adept
apt
super
surprise
terrific
thorough
thrive
thriving
unwavering
upbeat
upstanding
value
valuable
vibrant
victory
victorious
vitality
welcome
gratitude
thank
wonderful
wondrous
zeal
alacrity
accepted
acceptance
accomodat
accura
accomplish
ador
revere
reverent
reverence
affable
adroit
curious
delicious
fancy
frugal
thrift
glad
heart
jubilant
jolly
free
liberty
life
lovable
""".strip()

script=""

foulwords=words.split("\n")
goodwords=goodwords.split("\n")

story="""

This is a test!

Hello, my name is Sam.

Check this out.

"""















normalWords="""
check
checking
checks
checked
assist
assisted
assisting
assistant
hello
michelle
class
assure
assured
digging
bedtime
instead
passage
passages
pass
passing
skill
skills
skilled
teach
teacher
teachers
teaching
searchbutton
singing
ringing
switch
switching
twitch
twitchy
twitching
whatever
assess
assessing
assessed
assessor
diggin
classic
classification
classifications
embarrass
embarrassing
embarrassed
begin
begins
beginning
beginner
bedford
bringing
gayle
original
team
teams
teaming
obedience
landlord
molasses
aging
assignment
assignments
assigned
bass
buttered
embarrassment
grabbed
hanging
jeep
imagine
mass
massive
passes
plugging
christian
christmas
combed
beginners
imagination
imaginations
imagine
imagined
imagines
imagining
lamentable
lament
lamented
lamenting
milord
shell
shelled
shelling
rigging
stinging
arranging
rearranging
butter
classical
classmate
classmates
massachusetts
documentary
documentaries
gingerbread
imaginary
steady
butterfly
butterflies
imaginable
shellie
shelly
assessment
assembled
assemble
assembly
assembling
teamwork
reassembled
debugging
ginger
butterscotch
imaginative
scraping
debug
shells
passcode
password
passwords
passphrase
passphrases
associated
hassle
jogging
relaxing
steak
seaweed
relax
origin
origins
original
engine
engines
engineer
engineers
checker
checkers
climbed
documents
document
christians
classes
waxed
wax
waxing
classify
described
converging
masses
originated
originator
sagging
steadily
waxlike
unsteadily
trifle
trifles
tugging
trudging
teaches
tassel
tassels
surging
stead
steadfastly
springing
scrubbed
reassured
robed
overhanging
obediently
margin
longing
longingly
margins
passed
massed
absorbed
assistance
association
begun
max
maximum
maximillian
passer
passers
phosphates
phosphate
originally
relaxed
passeth
passive
passively
obliging
nosegays
nosegay
maxwell
lassie
lassies
lass
galaxy
galaxies
steadied
undisturbed
uninhabited
inhabited
clinging
axis
accumulate
accumulating
accumulates
accumulated
afterwards
afterward
toward
obedient
homeward
reward
rewards
rewarded
rewarding
rewarder
southward
northward
eastward
westward
stalwart
forward
forwards
thenceforward
warmest
warm
warmer
warmth
warmly
warranty
warranties
shakespeare
saxon
thwart
thwarted
thwarting
thwarts
unchanging
unchecked
shelley
beggin
begging
brass
classier
scrapper
silverware
steaks
steam
tear
tearing
unaware
scrapes
prohibited
managing
assistants
beginnings
assent
assented
assenting
assessors
assorted
assumed
awkwardly
changing
compassion
dangled
dangling
dehydrated
dumbfounded
encouraging
inwardly
sassafras
spearmint
striped
stripe
stripes
tears
waxy
youngin
webbed
wary
wariness
warily
upward
upwardly
grasshoppers
grasshopper
teardrop
succumbs
steamy
skillful
scraps
ranging
lounging
haggard
grogginess
grimaced
grimace
flame
flames
emerging
edging
cowl
circumstances
assume
assumes
assuring
assures
bulging
belonging
encompassed
gunk
rummaging
unimaginable
teachings
succumb
prolonging
impassible
grudgingly
grudging
classroom
classrooms
classified
dragging
dodging
associates
acknowledging
belongings
assert
assertion
twine
twitched
scrap
scrape
thank you
thank you.
thank you!
cucumber
classics
lodging
buttercup
tearful
tearfully
whatever
warranted
virginia
upspringing
untearful
surpass
surpassed
reassuringly
assumptions
charging
christmastime
lodgings
paycheck
checkin
christina
georgina
staging
warms
wardrobe
singin
sunglasses
christopher
classically
quadratic
ragweed
teammates
weevil
hashtagging
""".strip();






class LangCheck:
    def __init__(self, words, script):
        self.results={};
        self.evaluate(words, script);
    def remove_irrelevant(self):
        for x in set(normalWords.split("\n")):
            if x in self.results:
                del self.results[x];
    def handle_expletive_regex(self, match):
        text=match.group();
        if text not in self.results:
            self.results[text]=1;
        else:
            self.results[text]+=1;
        return text;
    def evaluate(self, words, script):
        script=script.lower();
        for x in words:
            if "*" in x or "?" in x or "." in x or "+" in x or "[" in x or "^" in x or "$" in x or "\\" in x:
                re.sub(x, self.handle_expletive_regex, script);
            else:
                re.sub(r"\w*"+x+r"\w*", self.handle_expletive_regex, script);
        self.remove_irrelevant();
        tfl=[]; #temporary foul language list (unsorted)
        for k,v in self.results.items():
            tfl.append(k+" "+str(v));
        tfl.sort();
        print("\033c");
        print("\n".join(tfl));
        return self.results;

#l=LangCheck(foulwords, story);
#webscript=requests.get("https://www.gutenberg.org/cache/epub/514/pg514.txt").text;

if __name__=="__main__":
    if len(sys.argv)==2:
        theScript=None;
        if os.path.isfile(sys.argv[1])==True:
            with open(sys.argv[1], "r") as FILE:
                theScript=FILE.read();
        else:
            theScript=requests.get(sys.argv[1]).text;
        l=LangCheck(foulwords, theScript);
        #print("\n\n\n\n\n")
        #l2=LangCheck(goodwords, webscript);
